module Data.Bitset.IOBitset

import Data.So
import Data.IOArray.Prims


export
record IOBitset (n:Int) where
  constructor MkIOBitset
  content : ArrayData Bits64


export newIOBitset : {n:Int} -> {auto _:So (n > 0)} -> IO (IOBitset n)
newIOBitset {n=n} = do
  let k = (n + 63) / 64
  pure $ MkIOBitset !(primIO $ prim__newArray k 0)

export insert : {n:Int} -> (m:Int) -> {auto _:So (n > m)} -> {auto _:So (m >= 0)} -> IOBitset n -> IO ()
insert {n=n} m bs = ?


