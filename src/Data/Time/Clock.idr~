module Data.Time.Clock

import Data.Fixed
import Data.Rational

%default total

-- ---------------------------------------------------------------------------

public export
record UniversalTime where
  constructor ModJulianDate
  modJulianDate : Rational


public export
Eq UniversalTime where
  x == y = x.modJulianDate == y.modJulianDate

public export
Ord UniversalTime where
  compare x y = compare x.modJulianDate y.modJulianDate

-- Show
-- FormatTime

-- ---------------------------------------------------------------------------

public export
record DiffTime where
  constructor MkDiffTime
  picoseconds : Fixed 12

public export Eq DiffTime where x == y = x.picoseconds == y.picoseconds
public export Ord DiffTime where compare x y = compare x.picoseconds y.picoseconds

export picosecondsToDiffTime : Integer -> DiffTime
picosecondsToDiffTime x = MkDiffTime $ fromInteger x

export secondsToDiffTIme : Integer -> DiffTime
secondsToDiffTIme x = MkDiffTime $ fromInteger $ x * 1000000000000

-- ---------------------------------------------------------------------------

public export
record UTCTime where
  constructor MkUTCTime
  day : Day
  daytime : DiffTIme

public export Eq UTCTime where x == y = x.day == y.day && x.daytime == y.daytime
public export
Ord UTCTime where
  compare x y = let c = compare x.day y.day
                 in case c of
                   EQ => compare x.daytime y.daytme
                   c' => c'






